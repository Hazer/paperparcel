package nz.bradcampbell.paperparcel;

import android.os.Parcelable;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Central mechanism for {@link #wrap(Object)}ing/{@link #unwrap(Parcelable)}ping PaperParcel
 * objects.
 */
public final class PaperParcels {
  public static final String WRAPPER_SUFFIX = "Parcel";
  public static final String DELEGATE_SUFFIX = "$$Delegate";

  private static final Map<Class, Delegate> DELEGATES = new LinkedHashMap<>();

  /**
   * Wrap the specified object in its PaperParcel wrapper.
   *
   * @throws IllegalArgumentException if wrapper is not found (no @PaperParcel annotation on type).
   */
  public static Parcelable wrap(Object original) {
    if (original == null) {
      return null;
    }
    Class<?> originalClass = original.getClass();
    Delegate delegate = DELEGATES.get(originalClass);
    if (delegate == null) {
      try {
        delegate = createDelegate(originalClass);
      } catch (ClassNotFoundException e) {
        throw new IllegalArgumentException(
            originalClass.getName() + " is not annotated with @" + PaperParcel.class.getName());
      }
    }
    //noinspection unchecked
    return delegate.wrap(original);
  }

  /**
   * Unwrap the specified Parcelable to its original @PaperParcel'd object.
   *
   * @throws IllegalArgumentException if the provided Parcelable was not generated by @PaperParcel.
   */
  public static <T> T unwrap(Parcelable parcelable) {
    if (parcelable == null) {
      return null;
    }
    TypedParcelable wrapper;
    if (parcelable instanceof TypedParcelable) {
      wrapper = (TypedParcelable) parcelable;
    } else {
      throw new IllegalArgumentException(
          parcelable.getClass().getName() + " is not recognised by PaperParcel");
    }
    //noinspection unchecked
    return (T) wrapper.get();
  }

  /**
   * Creates an array of the original type
   */
  public static <T> T[] newArray(Class<? extends T> originalClass, int size) {
    if (originalClass == null) {
      return null;
    }
    Delegate delegate = DELEGATES.get(originalClass);
    if (delegate == null) {
      try {
        delegate = createDelegate(originalClass);
      } catch (ClassNotFoundException e) {
        throw new IllegalArgumentException(
            originalClass.getName() + " is not annotated with @" + PaperParcel.class.getName());
      }
    }
    //noinspection unchecked
    return (T[]) delegate.newArray(size);
  }

  private static Delegate createDelegate(Class<?> originalClass) throws ClassNotFoundException {
    Delegate delegate;
    Class<?> delegateClass = getDelegateClass(originalClass);
    try {
      delegate = (Delegate) delegateClass.newInstance();
    } catch (InstantiationException e) {
      throw new AssertionError("Could not instantiate " + delegateClass, e);
    } catch (IllegalAccessException e) {
      throw new AssertionError("Could not access " + delegateClass, e);
    }
    DELEGATES.put(originalClass, delegate);
    return delegate;
  }

  private static Class<?> getDelegateClass(Class<?> originalClass) throws ClassNotFoundException {
    String className = originalClass.getName();
    if (className.startsWith("android.") || className.startsWith("java.")) {
      throw new ClassNotFoundException();
    }
    Class<?> delegateClass;
    try {
      delegateClass = Class.forName(className + DELEGATE_SUFFIX);
    } catch (ClassNotFoundException e) {
      // No delegate found, try superclass
      delegateClass = getDelegateClass(originalClass.getSuperclass());
    }
    return delegateClass;
  }

  public interface Delegate<T1, T2 extends TypedParcelable<T1>> {
    T2 wrap(T1 original);

    T1[] newArray(int size);
  }
}
